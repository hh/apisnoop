# -*- ii: y; -*-
#+TITLE: xip.io config

* Docker run cloud-native k8s dev env
** Environment for docker-init

Customize with your own email and repos (usually forks) to check out.

   #+name: cncf-conformance.env
   #+begin_src shell :tangle cncf-conformance.env
     # Pin your image
     KUBEMACS_IMAGE=kubemacs/kubemacs:2020.02.25
     # Or not
     # KUBEMACS_IMAGE=kubemacs/kubemacs:latest
     # $(id -u) / mainly for ~/.kube/config permissions
     HOST_UID="1001"
     # Vars for git commits
     KUBEMACS_GIT_EMAIL=hh@ii.coop
     KUBEMACS_GIT_NAME="Hippie Hacker"
     KUBEMACS_TIMEZONE=Pacific/Auckland
     # This is the kind cluster name, maybe we should rename
     # for some reason we can't used kind as the name
     KUBEMACS_KIND_NAME=cncf.conformance
     # ~/.kube/$KUBEMACS_HOSTCONFIG_NAME
     KUBEMACS_HOST_KUBECONFIG_NAME=config
     # Using a docker registry alongside kind
     KIND_LOCAL_REGISTRY_ENABLE=true
     KIND_LOCAL_REGISTRY_NAME=local-registry
     KIND_LOCAL_REGISTRY_PORT=5000
     # The repositories to check out
     KUBEMACS_INIT_DEFAULT_REPOS='https://github.com/hh/apisnoop.git'
     # The folder to start tmate/emacs in
     KUBEMACS_INIT_DEFAULT_DIR=apisnoop/deployment/k8s/xip.io
     # The first file you want emacs to open
     KUBEMACS_INIT_ORG_FILE=apisnoop/deployment/k8s/xip.io/README.org
     # If you want to see lots of information
     KUBEMACS_INIT_DEBUG=true
     # If you want to go ahead and kubectl exec into kubemacs
     KUBEMACS_INIT_DIRECT=true
   #+end_src

** Running Docker
   #+name: cncf-conformance.sh
   #+begin_src shell :tangle cncf-conformance.sh
     ENV_FILE=cncf-conformance.env
     . $ENV_FILE
     docker run \
            --env-file $ENV_FILE \
            --name kubemacs-docker-init \
            --user root \
            --privileged \
            --network host \
            --rm \
            -it \
            -v "$HOME/.kube:/tmp/.kube" \
            -v /var/run/docker.sock:/var/run/docker.sock \
            $KUBEMACS_IMAGE \
            docker-init.sh
   #+end_src

* Optionally Update Ingress

You can use the default urls that use the following catchall domains, but they will only work on your local computer. They work by responding with the address 127.0.0.1 for any (*) hostname within that domain.

If you want to share with others, you'll need a working DNS domain pointing to your IP, which work simlarly, but resolve to your public (or local wifi/ethernet) ip. Use YOUIP.xip.io if you don't have a domain, or configure your own.

** local computer only

- *.localho.st
  - http://tilt.localho.st
  - http://pgadmin.localho.st
  - http://hasura.localho.st
  - http://apisnoop.localho.st
- *.127.0.0.1.xip.io # can be updated to your own IP
  - http://tilt.127.0.0.1.xip.io
  - http://pgadmin.127.0.0.1.xip.io
  - http://hasura.127.0.0.1.xip.io
  - http://apisnoop.127.0.0.1.xip.io
- *.local.ii.coop # can be updated to your own domain
  - http://tilt.local.ii.coop
  - http://pgadmin.local.ii.coop
  - http://hasura.local.ii.coop
  - http://apisnoop.local.ii.coop

** Update YOUPIP.xip.io

   #+begin_src shell
     CURRENT_IP=127.0.0.1 # the default
     NEW_IP=$(curl ifconfig.co) # or IP of choice
     sed -i s:$CURRENT_IP:$NEW_IP:g *yaml
     echo http://tilt.$NEW_IP.xip.io
     echo http://pgadmin.$NEW_IP.xip.io
     echo http://hasura.$NEW_IP.xip.io
     echo http://apisnoop.$NEW_IP.xip.io
   #+end_src

   #+RESULTS:
   #+begin_example
   http://tilt.127.0.0.1.xip.io
   http://pgadmin.127.0.0.1.xip.io
   http://hasura.127.0.0.1.xip.io
   http://apisnoop.127.0.0.1.xip.io
   #+end_example

** Optionally Update *.local.ii.coop -> *.YOU.your.domain

   #+begin_src shell
     CURRENT_DOMAIN=local.ii.coop
     NEW_DOMAIN=hh.ii.coop
     sed -i s:$CURRENT_DOMAIN:$NEW_DOMAIN:g *yaml
     echo http://tilt.$NEW_DOMAIN
     echo http://pgadmin.$NEW_DOMAIN
     echo http://hasura.$NEW_DOMAIN
     echo http://apisnoop.$NEW_DOMAIN
   #+end_src

   #+RESULTS:
   #+begin_example
   http://tilt.local.ii.coop
   http://pgadmin.local.ii.coop
   http://hasura.local.ii.coop
   http://apisnoop.local.ii.coop
   #+end_example

* Bring up tilt
Tilt will use the kustomization.yaml and the patches it references to bring up the apisnoop development environment.
#+begin_src tmate :dir "."
  tilt up --host 0.0.0.0
#+end_src
* Reset basic-auth password

The default basic-auth user: ii pass: ii.
To change it, just update the basic-auth secret.

  #+name: reset basic-auth password
  #+begin_src shell
    kubectl delete secret basic-auth
    kubectl create secret generic basic-auth \
      --from-literal=auth=$(
        LOGIN=hh
        PASSWORD=ii
        echo $PASSWORD | htpasswd -i -n $LOGIN)
  #+end_src

  #+RESULTS: reset basic-auth password
  #+begin_example
  secret "basic-auth" deleted
  secret/basic-auth created
  #+end_example

* Next steps

If your writing tests, your next step are likely:

- [[file:~/apisnoop/org/tickets/mock-template.org::*Check%20it%20all%20worked][Check it all worked]] 
- [[file:~/apisnoop/org/tickets/mock-template.org::*Check%20current%20coverage][Check current coverage]] 
- [[file:~/apisnoop/org/tickets/mock-template.org::*Identify%20an%20untested%20feature%20Using%20APISnoop][Identify an untested feature Using APISnoop]]
